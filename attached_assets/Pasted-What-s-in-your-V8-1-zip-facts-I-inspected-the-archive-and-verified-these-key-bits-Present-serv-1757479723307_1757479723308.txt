What’s in your V8.1 zip (facts)

I inspected the archive and verified these key bits:

Present

server/ (Express API, Vite dev middleware, CORS/Helmet)

client/ (your dark theme UI)

shared/schema.ts (Drizzle schema with users, campaigns, posts, credits, etc.)

server/storage.ts (MemStorage in code), and server/storage.db.ts (Drizzle Postgres adapter)

server/replitAuth.ts (Replit OIDC) gated behind ENABLE_REPLIT_AUTH

server/db.ts (Neon / Postgres via DATABASE_URL)

server/aiRoutes.ts (calls @google/genai directly; text = "gemini-pro"; image/video outdated)

server/gcloud-ai.ts (older path)

server/health.ts, server/metrics.ts (good)

e2e/ folder (approval queue, campaign tests, etc.)

railway.json, Dockerfile* (Railway artifacts)

Missing or out-of-date

Unified AI module (server/ai/*) with Gemini 2.5 Pro, Imagen 4, Veo (start→poll) and retries.

Trial middleware & trial config you approved (7-day “Lite” trial: unlimited captions, 6 images, 0 video, video unlock via card or $5).

SQL migration for trial fields (card_on_file, trial_* counters, etc.).

.replit and replit.nix for clean Replit deployment & correct run command.

Stripe micro-pack route for $5 top-up (credit pack).

Tight CSP for prod (currently allows 'unsafe-eval').

Posting adapters are still “demo glue”; you said OK to prep for platform approvals, so we’ll stub them cleanly.

Railway files linger; since you’re shipping on Replit, we’ll either remove or isolate them so they never interfere.

Decisions (so we stop waffling)

Deploy on Replit. Keep Neon Postgres (already wired) via DATABASE_URL. Replit DB is not viable for this app; your code is already Drizzle/PG-ready.

AI stack: Vertex/Gemini/Imagen/Veo via a unified server-only module, never exposing keys client-side.

Trial = “Lite (no card, 7 days)” you approved: unlimited captions, 6 images, 0 videos by default. Video gated by add-card or $5 micro-pack (50 credits). This keeps trial cost ≤ $0.50 on average.

Credit prices (kept): $10/100, $50/600, $200/3000. Video 8s fast = 20 credits; image = 5; text = 1.

Abuse controls: email verify mandatory; per-hour AI op limit; 1 trial per email; soft device/IP checks.

What’s still missing to be 100% production-ready

Replace direct @google/genai calls with a unified server module server/ai/ (text/image/video + retries/backoff + structured errors).

Install trial system (config + middleware + DB fields + UI meters) and wire it before the credit middleware on AI routes.

Stripe: add tiny $5 micro-pack route + webhook → credit_transactions.

Moderation: enforce policy gates for text/image/video (you already started; we’ll harden and fail closed).

Approval Queue: ensure it references library items & campaign posts consistently and autosaves all non-text outputs to the user’s library.

Posting: keep X OAuth if you have it; stub others behind “awaiting platform approval”.

Prod CSP & CORS: tighten in production; allow 'unsafe-eval' only in dev.

Replit project files: add .replit and replit.nix; make Railway files inert.

E2E: expand tests to cover trial gates, unlock flow, image quotas, video gate, campaign creation, library autosave, moderation blocks.

Docs: Single source of truth in /docs: ARCHITECTURE, DEPLOYMENT, PRICING, TRIALS, RISK_REGISTER.

Everything below tells the Replit AI agent exactly what to do, in order, with verification gates so it can’t skip.

REPLIT AI — DO NOT SKIP ANY STEP

(If a check fails, fix then retry before continuing.)

0) Project bootstrap (Replit runtime)

Intent: Ensure the workspace runs with a single command and has Playwright deps.

Files to create/update

.replit

run = "npm run start:replit"


replit.nix

{ pkgs }: {
  deps = [
    pkgs.nodejs_20
    pkgs.python3
    pkgs.pkg-config
    pkgs.cairo
    pkgs.pango
    pkgs.libjpeg
    pkgs.libpng
    pkgs.git
    pkgs.chromium
  ];
}


package.json (add scripts)

{
  "scripts": {
    "start:replit": "NODE_ENV=production node dist/index.js",
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "e2e:install": "npx playwright install --with-deps",
    "e2e": "playwright test"
  }
}


Verification gate

Run: npm i && npm run build → succeeds.

Run: npm run e2e:install → installs browsers.

1) Environment & secrets (Replit Secrets)

Intent: Configure all runtime secrets.

Set in Replit Secrets:

DATABASE_URL (Neon/Supabase Postgres connection string)

SESSION_SECRET

GEMINI_API_KEY or GOOGLE_SERVICE_ACCOUNT_JSON + GOOGLE_CLOUD_PROJECT + VERTEX_LOCATION=us-central1

STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET

REPLIT_DOMAINS (comma-sep of your repl domain(s)), for CORS in dev

Railway leftovers

Leave railway.json and Dockerfile* untouched or delete them. They will not be referenced by .replit.

Verification gate

node -e "console.log(!!process.env.DATABASE_URL && !!process.env.SESSION_SECRET)" prints true true.

2) Database: ensure schema + add trial fields

Intent: Migrate DB and seed plans and a demo admin.

Create migration migrations/0002_trial_lite.sql

ALTER TABLE users
  ADD COLUMN IF NOT EXISTS card_on_file BOOLEAN DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT FALSE,
  ADD COLUMN IF NOT EXISTS trial_variant TEXT CHECK (trial_variant IN ('nocard7','card14')) DEFAULT 'nocard7',
  ADD COLUMN IF NOT EXISTS trial_started_at TIMESTAMPTZ DEFAULT NOW(),
  ADD COLUMN IF NOT EXISTS trial_ends_at TIMESTAMPTZ DEFAULT NOW() + INTERVAL '7 days',
  ADD COLUMN IF NOT EXISTS trial_images_remaining INT DEFAULT 6,
  ADD COLUMN IF NOT EXISTS trial_videos_remaining INT DEFAULT 0;


Seed script scripts/seed.ts

If missing, create a script that:

Inserts subscription plans (Starter/Pro/Enterprise, your prices).

Creates demo admin user demo-user-1 with a large credit bucket for E2E.

Sets trial_images_remaining=6, trial_videos_remaining=0.

Run

psql "$DATABASE_URL" -f migrations/0002_trial_lite.sql
npm run seed


Verification gate

SELECT COUNT(*) FROM subscription_plans; > 0

Demo admin exists; trial columns exist.

3) Unified AI module (server-only)

Intent: Remove SDK scatter; use one surface with retries/backoff; keep keys server-side.

Create folder server/ai/ with:

clients.ts

import { GoogleAI, GoogleVertexAI } from "@google/genai"; // if using new SDK
// If using service account JSON:
export function makeClients() {
  const usingVertex = !!process.env.GOOGLE_SERVICE_ACCOUNT_JSON;
  if (usingVertex) {
    const json = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON!);
    const project = process.env.GOOGLE_CLOUD_PROJECT!;
    const location = process.env.VERTEX_LOCATION || "us-central1";
    const vertex = new GoogleVertexAI({ project, location, googleAuth: { credentials: json }});
    return { vertex, genai: null };
  }
  if (process.env.GEMINI_API_KEY) {
    const genai = new GoogleAI({ apiKey: process.env.GEMINI_API_KEY });
    return { genai, vertex: null };
  }
  throw new Error("No AI credentials configured.");
}


config.ts

export const MODELS = {
  text: "gemini-2.5-pro",
  image: "imagen-4.0-generate-001",
  veoFast: "veo-3-fast",
  veoFull: "veo-3"
};
export const DEFAULTS = { temperature: 0.7, maxTokens: 2048, videoDurSec: 8 };


retry.ts, errors.ts (simple exponential backoff + normalized error map).

text.ts, image.ts, video.ts

generateText({prompt, system, temperature})

generateImage({prompt, aspectRatio}) → PNG base64, saved server-side, path returned

startVideo({prompt, durationSeconds, fast}) → returns opId

pollVideo({opId}) → returns status + download URL when ready
(Use Vertex long-running ops if service account is provided; otherwise skip video and return 501 with friendly message.)

Remove/disable

server/gcloud-ai.ts and any direct calls in routes.

Never expose model IDs or keys to client.

Verification gate

node -e "require('./server/ai/text').generateText ? console.log('ok') : process.exit(1)" prints ok.

4) Trial system & credit flow

Intent: Enforce your Lite Trial + clean upgrade without cost surprises.

Create config/trial.ts

export const TRIAL = {
  variant: process.env.TRIAL_VARIANT === "card14" ? "card14" : "nocard7",
  variants: {
    nocard7: { days: 7, images: 6, videos: 0, unlockVideoRequiresCard: true },
    card14: { days: 14, images: 30, videos: 3, unlockVideoRequiresCard: true }
  },
  rateLimit: { windowMinutes: 60, maxOps: 10 },
  videoSecondsCap: 8
};


Create server/middleware/trial.ts

import { TRIAL } from "../../config/trial";
import { db } from "../db";
import { users } from "@shared/schema";

export function withTrialGuard(op: "text"|"image"|"video"){
  return async (req:any,res:any,next:any)=>{
    const u=req.user?.claims?.sub ? await db.select().from(users).where(users.username.eq(req.user.claims.sub)).then(r=>r[0]) : null;
    if(!u) return res.status(401).json({error:"Auth required"});
    if(!u.emailVerified) return res.status(403).json({error:"Verify email to use the trial."});
    const now = Date.now();
    const active = u.trialStartedAt && u.trialEndsAt && now <= new Date(u.trialEndsAt).getTime();
    if(!active) return next(); // not in trial -> credits apply

    // rate limit (simple)
    // ... implement a per-user rolling counter in Redis/DB; if exceeded -> 429

    if(op==="text"){ res.locals.trialEligible="text"; return next(); }
    if(op==="image"){
      if(u.trialImagesRemaining<=0) return next();
      res.locals.trialEligible="image"; return next();
    }
    // video -> gated
    if(u.trialVideosRemaining<=0){
      return res.status(402).json({error:"Unlock video by adding a card or buying a $5 micro pack.", actions:{addCard:true,buyPack:true}});
    }
    req.body.durationSeconds = Math.min(Number(req.body.durationSeconds||8), TRIAL.videoSecondsCap);
    res.locals.trialEligible="video"; return next();
  };
}

export async function consumeTrialIfEligible(req:any,res:any){
  const op = res.locals.trialEligible;
  if(!op) return;
  const col = op==="image" ? "trial_images_remaining" : op==="video" ? "trial_videos_remaining" : null;
  if(!col) return;
  await db.execute(`UPDATE users SET ${col}=${col}-1 WHERE id=$1`,[req.user.id]);
}


Credits & plans

Keep your credits.ts mapping (text=1, image=5, video=20).

Ensure credit middleware deducts after success; if trial consumed, don’t double charge.

Wire the route order (very important):
trial → moderation → requireCredits → AI handler → consumeTrialIfEligible / deductCredits

Verification gate

New user can generate captions unlimited, 6 images OK, video returns 402 until unlocking.

Paid user bypasses trial limits and uses credits.

5) AI routes refactor to unified module + trial

Intent: Route logic concise, safe, and meterable.

Edit server/aiRoutes.ts (replace handlers; sketch shown)

import express from "express";
import { withTrialGuard, consumeTrialIfEligible } from "./middleware/trial";
import { requireSafePrompt } from "./content/moderation";
import { requireCredits, deductCredits } from "./middleware/credits";
import { generateText, generateImage, startVideo, pollVideo } from "./ai";

const router = express.Router();

router.post("/text",
  withTrialGuard("text"),
  requireSafePrompt("text"),
  requireCredits("text"),
  async (req,res)=>{
    const out = await generateText({ prompt:req.body.prompt, system:req.body.system, temperature:req.body.temperature });
    await consumeTrialIfEligible(req,res);
    await deductCredits(res); // no-op if trial was consumed
    res.json(out);
  });

router.post("/image",
  withTrialGuard("image"),
  requireSafePrompt("image"),
  requireCredits("image"),
  async (req,res)=>{
    const out = await generateImage({ prompt:req.body.prompt, aspectRatio:req.body.aspectRatio });
    // autosave to library here
    await consumeTrialIfEligible(req,res);
    await deductCredits(res);
    res.json(out);
  });

router.post("/video/start",
  withTrialGuard("video"),
  requireSafePrompt("video"),
  requireCredits("video"),
  async (req,res)=>{
    const out = await startVideo({ prompt:req.body.prompt, durationSeconds:req.body.durationSeconds, fast:true });
    await consumeTrialIfEligible(req,res);
    await deductCredits(res);
    res.json(out);
  });

router.get("/video/status", async (req,res)=>{
  const out = await pollVideo({ opId:String(req.query.op) });
  res.json(out);
});

export default router;


Verification gate

Image/text work using unified module; video start returns opId when unlocked; GET /ai/video/status?op=... polls to done.

6) Moderation & policy compliance

Intent: Block disallowed prompts before spend; keep platforms happy.

Harden server/content/moderation.ts:

Keyword/regex blocks (violence, hate, illegal, explicit, medical claims, etc.)

Per-platform policy profiles you can toggle later.

Return 422 with a clear message and remediation suggestions.

UI: Present moderation errors as toasts with a “See why” link.

Verification gate

E2E test sends a clearly disallowed prompt; backend returns 422 and UI shows explanation.

7) Library autosave & Approval Queue consistency

Intent: Every generated image/video is saved for the user; Approval Queue references library IDs.

Ensure your image/video handlers call a single saveToLibrary(userId, { type:'image'|'video', path, meta }) before responding.

Approval queue items store libraryItemId, not raw blobs.

Campaign builder picks from Library or fresh generations but always writes back to Library.

Verification gate

E2E: generate 2 images → Library shows 2 entries; create a campaign → posts reference those entries; approval queue displays thumbnails from Library.

8) Stripe routes (micro-pack + webhook)

Intent: Let trial users unlock video cheaply; record transactions.

Add route POST /api/billing/micropack → create $5 Checkout Session for 50 credits.

Webhook POST /api/billing/webhook:

On checkout.session.completed for that product, add 50 credits and write a credit_transactions row.

Add “Add card, no charge” pathway: create a SetupIntent; set card_on_file=true on success and trial_video_unlocked=true so they get 1 video free without immediate charge (optional but recommended).

Verification gate

Using Stripe test mode: complete micro-pack purchase → credits increase by 50; attempting a video afterwards succeeds.

9) Prod security

Intent: Lock it down.

In server/index.ts Helmet CSP:

In production, remove 'unsafe-eval' and only allow hashes/nonces as needed.

Restrict connectSrc to your Replit domain and required Google AI endpoints.

CORS:

In production, origin should be explicit domain list; in dev allow all.

Verification gate

NODE_ENV=production → app boots with CSP set, no console CSP errors in UI.

10) Social connectors (prep, not live)

Intent: Prepare for platform approvals without shipping broken buttons.

Keep X OAuth if working; for others, expose disabled states with “Coming after platform approval” tooltip.

Internal stubs (no external calls) that pass E2E (e.g., signed webhook simulators) so scheduling/publishing flows remain testable.

Verification gate

Clicking disabled platforms shows tooltip; X route works (if creds set) or is hidden if not configured.

11) E2E test suite (ship-stoppers only)

Intent: Prevent self-deception. Prove the money paths.

Add/ensure these tests:

e2e/trial-lite.spec.ts — signup → verify email → 2 images OK; video returns 402 → add card or buy micro-pack → 1 video OK.

e2e/content-quality.spec.ts — prompt returns non-empty text; images base64 decodable; videos complete within reasonable time (or are gated with clear message when locked).

e2e/campaign-14.spec.ts — 14 posts build, respects image availability; approvals queue shows items; publishing stub returns 200.

e2e/library-autosave.spec.ts — every image/video lands in Library.

e2e/moderation-gates.spec.ts — disallowed prompts return 422.

Commands

npm run e2e:install
E2E_BASE_URL=http://localhost:5000 npm run e2e


Verification gate

All tests green locally. Repeat after Replit deploy using live URL.

12) Documentation update

Intent: New engineer can replicate in <30 min.

docs/ARCHITECTURE.md — update to reflect server/ai/*, trial middleware, Stripe micro-pack.

docs/DEPLOYMENT.md — Replit steps, secrets list, build & run commands.

docs/PRICING_TRIALS.md — exactly what users get, cost rationale.

docs/RISK_REGISTER.md — API quota/rate limits, webhook timeouts, model drift, moderation false positives; mitigations listed.

Verification gate

Fresh clone on Replit with these docs gets to a running app in <30 minutes.

Copy-in Snippets (drop these now)
config/credits.ts
export const CREDIT_COSTS = { text: 1, image: 5, video: 20 };
export const VIDEO_CAP_SECONDS = 8;
export const VIDEO_MODEL_TIER = (tier:"starter"|"professional"|"enterprise") =>
  tier === "enterprise" ? "veo-3" : "veo-3-fast";

server/middleware/credits.ts

(Ensure you deduct after success and no-op when res.locals.trialEligible was used.)

export function requireCredits(kind:"text"|"image"|"video"){
  return async (req:any,res:any,next:any)=>{
    if(res.locals.trialEligible){ return next(); }
    // look up user credits; if insufficient -> 402
    // else set res.locals.debit = CREDIT_COSTS[kind]; next();
  };
}
export async function deductCredits(res:any){
  if(!res.locals.debit || res.locals.trialEligible) return;
  // decrement user credits atomically
}

.replit and replit.nix

(as shown in Step 0)

migrations/0002_trial_lite.sql

(as shown in Step 2)

Launch checklist (hard gates)

 npm run build succeeds on Replit

 /health returns 200; /metrics returns prometheus text

 New user → email verify → generate captions/images; image counter decrements; video gated (402)

 Add card or buy $5 micro-pack → video allowed once; credits recorded

 Library shows every image/video generated

 Campaign: 14-post wizard completes; approval queue displays items

 Moderation blocks disallowed prompts with clear UX

 E2E suite green against Replit URL

 CSP hardened in prod; no secrets in client bundle

Why this gets you there

Costs controlled (trial ≤ $0.50) without neutering the experience.

Server-side AI only, retries/backoff, clean errors: fewer flaky experiences, lower risk.

Trials & credits enforced where it matters (API boundary); no accidental spend.

Autosave & approvals: nothing vanishes; everything is reviewable.

E2E that asserts reality, not vibes.

You asked for the best, not the easiest. This is the sober, operations-grade path from “demo glue” to “take my money.” If you want, I can also generate a git patch bundle for the unified AI + trial middleware so Replit can git apply it in one shot.