Embedded form
View the text-based guide
You're integrating in Test mode. Try using a sandbox instead.

Switch to a sandbox

Embedded form
Explore a full, working code sample of an integration with Stripe Checkout that lets your customers pay through an embedded form on your website. The example includes client and server-side code, and an embeddable UI component displays the payment form.


Download full app
Integrate in VS Code
Don't code? Use Stripe’s no-code options or get help from our partners.
1
Set up the server
Install the Stripe Node library
Install the package and import it in your code. Alternatively, if you’re starting from scratch and need a package.json file, download the project files using the Download link in the code editor.


npm

GitHub
Install the library:

npm install --save stripe

Server
Create a Checkout Session
Add an endpoint on your server that creates a Checkout Session, setting the ui_mode to embedded.

The Checkout Session response includes a client secret, which the client uses to mount Checkout. Return the client_secret in your response.

Server
Supply a return URL
To define how Stripe redirects your customer after payment, specify the URL of the return page in the return_url parameter while creating the Checkout Session. After the payment attempt, Stripe directs your customer to return page hosted on your website.

Include the {CHECKOUT_SESSION_ID} template variable in the URL. Before redirecting your customer, Checkout replaces the variable with the Checkout Session ID. You’re responsible for creating and hosting the return page on your website.

Server
Define a product to sell
Define the products you’re selling when you create the Checkout Session by using predefined price IDs.

Always keep sensitive information about your product inventory, such as price and availability, on your server to prevent customer manipulation from the client.



One-time

Recurring
Name
Sunglasses, premium plan, etc.
Price
0.00

USD

Create test product
More options
Server
Choose the mode
To handle different transaction types, adjust the mode parameter. For one-time payments, use payment. To initiate recurring payments with subscriptions, switch the mode to subscription. And for setting up future payments, set the mode to setup.

Server
2
Mount Checkout
Add Stripe to your React app
To stay PCI compliant by ensuring that payment details go directly to Stripe and never reach your server, install React Stripe.js.

npm install --save @stripe/react-stripe-js @stripe/stripe-js

Client
Load Stripe.js
To configure the Stripe library, call loadStripe() with your Stripe publishable API key.

Client
Fetch a Checkout Session client secret
Create an asynchronous fetchClientSecret function that makes a request to your server to create a Checkout Session and retrieve the client secret.

Client
Initialize Checkout
To allow the child components to access the Stripe service through the embedded Checkout consumer, pass the resulting promise from loadStripe and the client secret as an option to the embedded Checkout provider.

Client
3
Show a return page
Create an endpoint to retrieve a Checkout Session
Add an endpoint to retrieve a Checkout Session status.

Server
Add a return component
To display order information to your customer, add a new route and return component for the URL you provided as the Checkout Session return_url. Stripe redirects to this page after the customer completes the checkout.

Client
Retrieve a Checkout session
As soon as your return page loads, immediately make a request to the endpoint on your server. Use the Checkout Session ID in the URL to retrieve the status of the Checkout Session.

Client
Handle session
Handle the result of the session by using its status:

complete: The payment succeeded. Use the information from the Checkout Session to render a success page.
open: The payment failed or was canceled. Remount Checkout so that your customer can try again.
Client
4
Test your page
Run the application
Start your server and go to http://localhost:3000/checkout

npm start

Client
Try it out
Click the pay button to complete the payment, which redirects you to the specified return page.

If you see the return page, and the payment in the list of successful payments in the Dashboard, your integration is successfully working. Use any of the following test cards to simulate a payment:

Payment succeeds

4242 4242 4242 4242
Payment requires authentication

4000 0025 0000 3155
Payment is declined

4000 0000 0000 9995
Congratulations!
You have a basic Checkout integration working. Now learn how to customize the appearance of your checkout page and automate tax collection.


Customize the appearance of the embedded form by:

Adding your color theme and font in your branding settings.
Using the Checkout Sessions APIto activate additional features, like collecting addresses and prefilling customer data.

Calculate and collect the right amount of tax on your Stripe transactions. Learn more about Stripe Tax and how to add it to Checkout.

Set up Stripe Tax in the Dashboard
Activate Stripe Tax to monitor your tax obligations, automatically collect tax, and access the reports you need to file returns.

Server
Add the automatic tax parameter
Set the automatic_tax parameter to enabled: true.

Server

By default, Checkout only creates Customers when one is required (for example, for subscriptions). Otherwise, Checkout uses guest customers to group payments in the Dashboard. You can optionally configure Checkout to always create a new customer or to specify a returning customer.

Next steps
Fulfill orders
Set up a webhook to fulfill orders after a payment succeeds. Webhooks are the most reliable way to handle business-critical events.

Receive payouts
Learn how to move funds out of your Stripe account into your bank account.

Refund and cancel payments
Handle requests for refunds by using the Stripe API or Dashboard.

Customer management
Let your customers self-manage their payment details, invoices, and subscriptions