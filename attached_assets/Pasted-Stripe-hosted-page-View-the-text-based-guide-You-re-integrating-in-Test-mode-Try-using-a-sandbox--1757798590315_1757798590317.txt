Stripe-hosted page
View the text-based guide
You're integrating in Test mode. Try using a sandbox instead.

Switch to a sandbox

Stripe-hosted page
Explore a full, working code sample of an integration with Stripe Checkout where customers click a button on your site and get redirected to a payment page hosted by Stripe. The example includes client- and server-side code, and the payment page is prebuilt.


Download full app
Integrate in VS Code
Don't code? Use Stripe’s no-code options or get help from our partners.
1
Set up the server
Install the Stripe Node library
Install the package and import it in your code. Alternatively, if you’re starting from scratch and need a package.json file, download the project files using the Download link in the code editor.


npm

GitHub
Install the library:

npm install --save stripe

Server
Create a Checkout Session
Add an endpoint on your server that creates a Checkout Session. A Checkout Session controls what your customer sees on the payment page such as line items, the order amount and currency, and acceptable payment methods. We enable cards and other common payment methods for you by default, and you can enable or disable payment methods directly in the Stripe Dashboard.

Server
Define a product to sell
Always keep sensitive information about your product inventory, such as price and availability, on your server to prevent customer manipulation from the client. Define product information when you create the Checkout Session using predefined price IDs or on the fly with price_data.



One-time

Recurring
Name
Sunglasses, premium plan, etc.
Price
0.00

USD

Create test product
More options
Server
Choose a mode
To handle different transaction types, adjust the mode parameter. For one-time payments, use payment. To initiate recurring payments with subscriptions, switch the mode to subscription. And for setting up future payments, set the mode to setup.

Server
Supply success and cancel URLs
Specify URLs for success and cancel pages—make sure they’re publicly accessible so Stripe can redirect customers to them. You can also handle both the success and canceled states with the same URL.

Server
Redirect to Checkout
After creating the session, redirect your customer to the URL for the Checkout page returned in the response.

Server
2
Build your checkout
Add an order preview page
Add a page to show a preview of the customer’s order. Allow them to review or modify their order—as soon as they’re sent to the Checkout page, the order is final and they can’t modify it without creating a new Checkout Session.

Client
Add a checkout button
Add a button to your order preview page. When your customer clicks this button, they’re redirected to the Stripe-hosted payment form.

Client
3
Test your page
Before you run the application
Add “proxy”: “<http://localhost:4242>” to your package.json file during local development.

Server
Run the application
Start your server and go to http://localhost:3000/checkout

npm start

Client
Try it out
Click the checkout button to be redirected to the Stripe Checkout page. Use any of these test cards to simulate a payment.

Payment succeeds

4242 4242 4242 4242
Payment requires authentication

4000 0025 0000 3155
Payment is declined

4000 0000 0000 9995
Congratulations!
You have a basic Checkout integration working. Now learn how to customize the appearance of your checkout page and automate tax collection.


Customize the appearance of the hosted Checkout page by:

Adding your logo and color theme in your branding settings.
Using the Checkout Sessions API to activate additional features, like collecting addresses or prefilling customer data.
Prefill customer data
Use customer_email to prefill the customer’s email address in the email input field. You can also pass a Customer ID to the customer field to prefill the email address field with the email stored on the Customer.

Server
Pick a submit button
Configure the copy displayed on the Checkout submit button by setting the submit_type. There are four different submit types.

Server
Collect billing and shipping details
Use billing_address_collection and shipping_address_collection to collect your customer’s address. shipping_address_collection requires a list of allowed_countries. Checkout displays the list of allowed countries in a dropdown menu on the page.

Server
Preview the customized page
Click the checkout button to see a sample Stripe Checkout page with these additional fields. Learn more about all the ways you can customize Checkout.

Server

Calculate and collect the right amount of tax on your Stripe transactions. Learn more about Stripe Tax and how to add it to Checkout.

Set up Stripe Tax in the Dashboard
Activate Stripe Tax to monitor your tax obligations, automatically collect tax, and access the reports you need to file returns.

Server
Add the automatic tax parameter
Set the automatic_tax parameter to enabled: true.

Server

By default, Checkout only creates Customers when one is required (for example, for subscriptions). Otherwise, Checkout uses guest customers to group payments in the Dashboard. You can optionally configure Checkout to always create a new customer or to specify a returning customer.

Always create customers
To always create customers whenever one isn’t provided, set customer_creation to 'always'.

Server
Specify returning customers
To associate a Checkout Session with a customer that already exists, provide the customer when creating a session.

Server
Next steps
Fulfill orders
Set up an event destination to fulfill orders after a payment succeeds and to handle other critical events.

Receive payouts
Learn how to move funds out of your Stripe account into your bank account.

Refund and cancel payments
Handle requests for refunds by using the Stripe API or Dashboard.

Customer management
Let your customers self-manage their payment details, invoices, and subscriptions.

Adaptive Pricing
Automatically present prices in your customer’s local currency.