Short answer: your error is almost certainly a **model ID / API surface mismatch** (or an older SDK). **Veo 3 Fast *is* available in the Gemini API** and the *exact* model id you must use is:

```
veo-3.0-fast-generate-001
```

(Regular Veo 3 is `veo-3.0-generate-001`.) That’s straight from Google’s docs, last updated Sep 8, 2025. ([Google AI for Developers][1])

---

## Fix it in 10 tight steps

### 1) Use the right API surface

* **Gemini API** (API key from AI Studio) supports Veo 3 + Veo 3 Fast with long-running operations.
* **Vertex AI** also supports Veo, but uses service accounts + regional endpoints.
  If you’re using a **Gemini API key**, your code should call the **Gemini API**, not Vertex endpoints. Model IDs above are for the **Gemini API**. ([Google AI for Developers][1])

### 2) Pin the exact model ID

Anywhere you previously had things like `"veo-3-fast"`, `"veo3-fast"`, `"veo-3"`, etc., replace with:

* Fast: `veo-3.0-fast-generate-001`
* Standard: `veo-3.0-generate-001` ([Google AI for Developers][1])

### 3) Upgrade the SDK

Use the **official Gemini API client** and keep it current:

```bash
npm i @google/genai@latest
# or
npm i google-genai@latest
```

Veo 3 generateVideo is available in the current Gemini client; older clients will throw “model not found / not available yet.”

### 4) Minimal working Node snippet (Gemini API)

```ts
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY! });

export async function startVeoFast(prompt: string) {
  // Try FAST first
  let op = await ai.models.generateVideos({
    model: "veo-3.0-fast-generate-001",
    prompt,
    // Optional: cap duration on your side; 8s is the current max anyway
    config: { aspectRatio: "16:9", resolution: "720p" }
  });

  // Poll until done
  while (!op.done) {
    await new Promise(r => setTimeout(r, 10000));
    op = await ai.operations.getVideosOperation({ operation: op });
  }

  if (!op.response?.generatedVideos?.length) {
    throw new Error("Veo returned no video");
  }

  const file = op.response.generatedVideos[0].video;
  // Download to disk or return the file handle
  const dl = await ai.files.download({ file, downloadPath: "out.mp4" });
  return dl;
}
```

This mirrors Google’s docs (start → poll → download). If you prefer the standard (non-fast) model, just swap the model id. ([Google AI for Developers][1])

### 5) Add a safe fallback

Some projects (wrong key, restricted account, stale SDK) still fail FAST. Fall back to standard Veo 3 once, then surface a friendly banner.

```ts
async function startVeoWithFallback(prompt: string) {
  try {
    return await startVeoFast(prompt);
  } catch (err:any) {
    const msg = String(err?.message ?? err);
    const recoverable = /not found|unsupported|unavailable|permission/i.test(msg);
    if (!recoverable) throw err;
    // Fallback to standard Veo 3
    return await ai.models.generateVideos({
      model: "veo-3.0-generate-001",
      prompt
    });
  }
}
```

### 6) Make sure your **project is enabled** for Veo

* In **AI Studio**, accept the latest terms and ensure your **GEMINI\_API\_KEY** is tied to the right project.
* Billing must be enabled; some features get blocked on non-billable projects even if the docs say “available”.
  Docs confirm Veo 3 + Veo 3 Fast are available via Gemini API; if you still get “not available”, it’s usually project/key config, not global availability. ([Google AI for Developers][1])

### 7) Don’t mix regions incorrectly

* **Gemini API**: you don’t specify a region in the client; Google routes it.
* **Vertex AI**: you must use a supported region (e.g., `us-central1`). Using Vertex code with a Gemini key (or vice-versa) is a classic way to get “model not available”. ([Google AI for Developers][1])

### 8) Log the triage details

When you catch the error, log:

* model string used
* client type (Gemini vs Vertex)
* SDK version
* last 200 chars of error
  It saves hours later.

### 9) Respect current constraints

* Max length: **8 seconds** (both Veo 3 & Veo 3 Fast today).
* 720p/1080p depending on aspect ratio; audio is on by default for Veo 3/3 Fast.
* Videos are kept server-side for **\~2 days**; download promptly. ([Google AI for Developers][1])

### 10) Update your app’s model gate

If your repo still selects `"veo-3-fast"` in `modelGate.ts` or config, change to:

```ts
export const MODELS = {
  text: "gemini-2.5-pro",
  image: "imagen-4.0-generate-001",
  videoFast: "veo-3.0-fast-generate-001",
  videoStd:  "veo-3.0-generate-001",
};
```

---

## Why you saw “Veo Fast not available yet”

One of these nearly always applies:

1. **Wrong model id** (`veo-3-fast`, `veo-3` etc. instead of `veo-3.0-fast-generate-001`). ([Google AI for Developers][1])
2. **Old client** that predates Veo 3 Fast GA.
3. **Gemini key + Vertex code path** (or vice-versa). ([Google AI for Developers][1])
4. **Project isn’t fully enabled/billable** in AI Studio.
5. **Region mismatch** (only if you were using Vertex).

Fix the model id and SDK first; 90% of cases vanish there.

---

## Quick patch set (drop-in)

**`server/ai/config.ts` (or wherever you centralize model IDs)**

```diff
- export const VIDEO_MODEL_FAST = "veo-3-fast";
- export const VIDEO_MODEL_STD  = "veo-3";
+ export const VIDEO_MODEL_FAST = "veo-3.0-fast-generate-001";
+ export const VIDEO_MODEL_STD  = "veo-3.0-generate-001";
```

**`server/ai/video.ts`**

```diff
- const model = opts.fast ? VIDEO_MODEL_FAST : VIDEO_MODEL_STD;
- const op = await ai.models.generateVideos({ model, prompt: opts.prompt, ... });
+ const model = opts.fast ? VIDEO_MODEL_FAST : VIDEO_MODEL_STD;
+ let op;
+ try {
+   op = await ai.models.generateVideos({ model, prompt: opts.prompt, config: { aspectRatio: "16:9" } });
+ } catch (e:any) {
+   if (opts.fast && /not.*(found|available)/i.test(String(e?.message))) {
+     // fallback to standard Veo 3 quietly
+     op = await ai.models.generateVideos({ model: VIDEO_MODEL_STD, prompt: opts.prompt });
+   } else {
+     throw e;
+   }
+ }
  // poll…
```

**`server/ai/modelGate.ts`**

```diff
- if (tier !== "enterprise") return { video: "veo-3-fast", maxVideoSeconds: 8 };
+ if (tier !== "enterprise") return { video: "veo-3.0-fast-generate-001", maxVideoSeconds: 8 };
+ return { video: "veo-3.0-generate-001", maxVideoSeconds: 8 };
```

**E2E (smoke):** assert a **200** from `/ai/video/start` when FAST is available; if your CI has no key, assert the app returns a clean “feature unavailable” message rather than a 500.

---

If you want, I can also generate a tiny “capability probe” endpoint (`/ai/video/capabilities`) that pings the model list once at boot and caches `{fastAvailable: true/false}` so the UI can show “Veo Fast is ready” vs “Using standard Veo 3 today.” That avoids user confusion and silently follows the best available path.

[1]: https://ai.google.dev/gemini-api/docs/video "Generate videos with Veo 3 in Gemini API  |  Google AI for Developers"
