Love the dark look; the bones are good. The current Schedule page is just… empty grids and tiny hit-targets. Here’s a precise, end-to-end upgrade plan that makes it clean, obvious, and fast to use—with drop-in code you can wire immediately.

---

# Diagnosis (what’s not working)

* **Visual hierarchy is flat.** Time grid dominates, but “what to do next” is unclear.
* **Drafts UX is weak.** “No draft posts available” is just text; you can’t see and drag real items.
* **Micro-interactions missing.** No “now” line, no hover previews, no conflict warnings, no keyboard help.
* **Context switching.** Editing a post requires leaving the view instead of an inline inspector.
* **Timezone ambiguity.** Users don’t know which TZ they’re scheduling.
* **Performance headroom.** Dense grid + re-renders will jitter when many events exist.

---

# Target experience (what it *should* feel like)

1. Left **Drafts rail**: visual cards you drag onto the calendar.
2. Middle **Calendar**: week/day with colored blocks per platform, “now” line, smart snapping.
3. Right **Inspector**: instant edit—caption, platform(s), tags, approvals.
4. Top **toolbar**: Week/Day/Agenda, date picker, timezone chip, platform filters, “Auto-Schedule” button.
5. **Conflict & approval** cues: badges right on events; click to resolve.
6. **AI nudge**: ghost “best time” hints based on past performance or generic heuristics.
7. **Delight**: subtle shadows, 8–12px radius, 150–200ms transitions, and roomy hit-targets.

---

# Information design

* **Event colors**: one hue per platform (X = sky, IG = pink, FB = blue, TikTok = violet, LinkedIn = cyan). Use 40–60% opacity fill, 100% border.
* **Status badges**: Draft (gray), Scheduled (brand color), Needs Approval (amber), Failed (red), Posted (green).
* **Now line**: 2px accent line across the grid.
* **Weekend shading**: 2% darker background to orient the eye.

---

# Interaction model

* **Drag from Drafts → drop on a slot**: opens inline form; “Save” schedules.
* **Drag within calendar**: re-time; shows snap and conflict hint.
* **Resize**: adjusts duration (if multi-slot supported).
* **Multi-select**: Shift+click to move a batch.
* **Keyboard**: `N` new draft modal, `Del` unschedule, `⌘/Ctrl+Z` undo last move.
* **Timezone**: chip on toolbar; changing it reflows grid.

---

# Implementation plan (do these in order)

1. **Adopt FullCalendar + interaction plugin** (battle-tested) or React Big Calendar. I recommend **FullCalendar** for drag-drop polish.
2. **Add Drafts rail** (virtualized list with thumbnails/caption snippet).
3. **Add Inspector panel** (slide-over using shadcn/ui `Sheet`).
4. **Add toolbar** (filters, timezone, date navigation).
5. **Wire API**:

   * `GET /api/schedule?from&to` → events
   * `POST /api/schedule` → create (from draft)
   * `PUT /api/schedule/:id` → move/resize
   * `DELETE /api/schedule/:id` → unschedule
   * All with zod validation, request-ID logging, optimistic UI.
6. **Conflicts**: server returns `409` with suggestions; UI offers “resolve” (auto-nudge 15m).
7. **AI “Best time” hints**:

   * If analytics present → compute per platform; else default heuristics (e.g., IG weekdays 11–1 & 6–8 local).
   * Render as faint ghost blocks; clicking schedules at that time.
8. **Now line + weekend shade + density**: reduce row height, increase line contrast; keep hit-targets ≥36px.
9. **Accessibility**: focus rings, ARIA labels, high-contrast badges; keyboard ops mirrored in tooltips.
10. **E2E coverage**: drag from Drafts, drop → scheduled; conflict → 409 → auto-resolve; inspector edit saves.

---

# Drop-in code (React + Tailwind + shadcn/ui)

> This assumes your front-end uses React + Tailwind and your dark palette. FullCalendar is client-only; load via dynamic import if you use SSR.

### 1) Install

```bash
npm i @fullcalendar/react @fullcalendar/timegrid @fullcalendar/interaction dayjs
```

### 2) SchedulePage shell

```tsx
// client/src/pages/SchedulePage.tsx
import React, { useMemo, useRef, useState } from "react";
import FullCalendar from "@fullcalendar/react";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin, { Draggable } from "@fullcalendar/interaction";
import dayjs from "dayjs";
import { Sheet, SheetContent, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Badge } from "@/components/ui/badge";
import { DraftsRail } from "./_DraftsRail";
import { Toolbar } from "./_ScheduleToolbar";
import { EventInspector } from "./_EventInspector";

const PLATFORM_COLORS: Record<string,string> = {
  x: "#38bdf8", ig: "#ec4899", fb: "#3b82f6", tiktok: "#8b5cf6", li: "#06b6d4"
};

export default function SchedulePage(){
  const [events,setEvents] = useState<any[]>([]);
  const [filters,setFilters] = useState<string[]>([]);   // platform filters
  const [tz,setTz] = useState<Intl.UnicodeExtensionLocale>("America/Chicago" as any);
  const [selected,setSelected] = useState<any|null>(null);

  const visibleEvents = useMemo(
    () => filters.length ? events.filter(e=>filters.includes(e.platform)) : events,
    [events, filters]
  );

  function eventContent(arg:any){
    const e = arg.event.extendedProps;
    const color = PLATFORM_COLORS[e.platform] || "#a855f7";
    return (
      <div className="h-full w-full px-2 py-1 rounded-md"
        style={{ backgroundColor: `${color}26`, borderColor: color, borderWidth: 1 }}>
        <div className="flex items-center justify-between gap-2">
          <span className="truncate text-[12px] text-zinc-100">{e.title || e.platform.toUpperCase()}</span>
          <Badge className="text-[10px]" variant={e.status==="needs_approval" ? "secondary" : "outline"}>
            {e.status.replace("_"," ")}
          </Badge>
        </div>
      </div>
    );
  }

  async function fetchEvents(view:any){
    const from = dayjs(view.start).toISOString();
    const to   = dayjs(view.end).toISOString();
    const res = await fetch(`/api/schedule?from=${from}&to=${to}`);
    const json = await res.json();
    setEvents(json.events);
  }

  async function createFromDraft(dropInfo:any, draft:any){
    const payload = {
      draftId: draft.id,
      platform: draft.platform,
      startsAt: dropInfo.date.toISOString()
    };
    const r = await fetch("/api/schedule", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(payload) });
    if (r.status === 409) {
      const { suggestMinutes } = await r.json();
      dropInfo.revert();
      // toast suggestion, or auto-nudge then re-fetch
      return;
    }
    await fetchEvents(dropInfo.view);
  }

  return (
    <div className="grid grid-cols-[280px,1fr,360px] gap-6 px-6 py-6">
      <DraftsRail onInitDraggable={(el)=> new Draggable(el, { itemSelector: ".draft-card", eventData: (eventEl:any)=> JSON.parse(eventEl.dataset.event) })}/>
      <div className="rounded-2xl border border-zinc-800 bg-zinc-900 p-4">
        <Toolbar tz={tz} onTzChange={setTz} filters={filters} onFiltersChange={setFilters}/>
        <div className="mt-3">
          <FullCalendar
            plugins={[timeGridPlugin, interactionPlugin]}
            initialView="timeGridWeek"
            slotMinTime="06:00:00"
            slotMaxTime="22:00:00"
            nowIndicator
            height="auto"
            eventOverlap
            eventContent={eventContent}
            events={visibleEvents}
            datesSet={fetchEvents}
            droppable
            editable
            eventDrop={async (info)=> {
              const r = await fetch(`/api/schedule/${info.event.id}`, { method:"PUT", headers:{ "Content-Type":"application/json" }, body: JSON.stringify({ startsAt: info.event.start })});
              if (!r.ok) info.revert();
            }}
            drop={async (info:any)=> {
              const draft = JSON.parse(info.draggedEl.dataset.event);
              await createFromDraft(info, draft);
            }}
            eventClick={(e)=> setSelected(e.event.extendedProps)}
            slotEventOverlap
            scrollTime={dayjs().format("HH:mm:ss")}
          />
        </div>
      </div>
      <Sheet open={!!selected} onOpenChange={(v)=> !v && setSelected(null)}>
        <SheetContent side="right" className="bg-zinc-900 text-zinc-100">
          <SheetHeader><SheetTitle>Edit Post</SheetTitle></SheetHeader>
          <EventInspector event={selected} onSaved={()=> setSelected(null)}/>
        </SheetContent>
      </Sheet>
    </div>
  );
}
```

### 3) Drafts rail (drag source)

```tsx
// client/src/pages/_DraftsRail.tsx
import React, { useEffect, useRef, useState } from "react";

export function DraftsRail({ onInitDraggable }:{ onInitDraggable:(container:HTMLElement)=>void }){
  const [drafts,setDrafts] = useState<any[]>([]);
  const ref = useRef<HTMLDivElement|null>(null);

  useEffect(()=>{ fetch("/api/drafts").then(r=>r.json()).then(d=>setDrafts(d.items||[])); },[]);
  useEffect(()=>{ if (ref.current) onInitDraggable(ref.current); }, [ref.current]);

  return (
    <div ref={ref} className="rounded-2xl border border-zinc-800 bg-zinc-900 p-4 h-[calc(100vh-140px)] overflow-auto">
      <h3 className="text-sm font-semibold">Draft Posts</h3>
      <div className="mt-3 space-y-3">
        {drafts.length === 0 && (
          <div className="text-xs text-zinc-400">No drafts. Create content first.</div>
        )}
        {drafts.map(d=>(
          <div key={d.id} className="draft-card cursor-grab active:cursor-grabbing rounded-xl border border-zinc-800 bg-zinc-800/50 p-3"
               data-event={JSON.stringify({ title: d.title, platform: d.platform, draftId: d.id })}>
            <div className="text-[12px] text-zinc-300 truncate">{d.title || "Untitled"}</div>
            <div className="text-[11px] text-zinc-500">{d.platform.toUpperCase()}</div>
          </div>
        ))}
      </div>
    </div>
  );
}
```

### 4) Toolbar (filters, tz, auto-schedule)

```tsx
// client/src/pages/_ScheduleToolbar.tsx
import React from "react";

const PLATFORM_FILTERS = ["x","ig","fb","tiktok","li"];

export function Toolbar({ tz, onTzChange, filters, onFiltersChange }:{
  tz: string; onTzChange:(v:string)=>void; filters:string[]; onFiltersChange:(v:string[])=>void;
}){
  function toggle(f:string){
    const s = new Set(filters);
    s.has(f) ? s.delete(f) : s.add(f);
    onFiltersChange(Array.from(s));
  }
  return (
    <div className="flex items-center justify-between">
      <div className="flex items-center gap-2">
        {PLATFORM_FILTERS.map(f=>(
          <button key={f} onClick={()=>toggle(f)}
            className={`px-3 py-1 rounded-lg text-xs border ${filters.includes(f) ? "border-fuchsia-500 bg-fuchsia-500/10" : "border-zinc-700"}`}>
            {f.toUpperCase()}
          </button>
        ))}
      </div>
      <div className="flex items-center gap-2">
        <select value={tz} onChange={e=>onTzChange(e.target.value)} className="bg-zinc-800 border border-zinc-700 rounded-lg px-2 py-1 text-xs">
          <option>America/Chicago</option>
          <option>America/New_York</option>
          <option>America/Los_Angeles</option>
          <option>Europe/London</option>
          <option>Asia/Singapore</option>
        </select>
        <button className="px-3 py-1 rounded-lg text-xs border border-emerald-500 bg-emerald-500/10">Auto-Schedule</button>
      </div>
    </div>
  );
}
```

### 5) Inspector (edit inline)

```tsx
// client/src/pages/_EventInspector.tsx
import React, { useEffect, useState } from "react";

export function EventInspector({ event, onSaved }:{ event:any; onSaved:()=>void }){
  const [form,setForm] = useState<any>({ caption:"", tags:"" });
  useEffect(()=>{ if(event){ setForm({ caption: event.caption||"", tags: (event.tags||[]).join(", ") }); }},[event]);

  if(!event) return null;

  async function save(){
    const r = await fetch(`/api/schedule/${event.id}`, {
      method:"PUT", headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({ caption: form.caption, tags: form.tags.split(",").map((s:string)=>s.trim()) })
    });
    if (r.ok) onSaved();
  }

  return (
    <div className="mt-4 space-y-3">
      <div className="text-xs text-zinc-400">Platform</div>
      <div className="text-sm">{String(event.platform).toUpperCase()}</div>

      <div className="text-xs text-zinc-400">Caption</div>
      <textarea className="w-full bg-zinc-800 border border-zinc-700 rounded-lg p-2 text-sm"
                rows={6} value={form.caption} onChange={(e)=>setForm({...form, caption:e.target.value})}/>

      <div className="text-xs text-zinc-400">Tags</div>
      <input className="w-full bg-zinc-800 border border-zinc-700 rounded-lg p-2 text-sm"
             value={form.tags} onChange={(e)=>setForm({...form, tags:e.target.value})}/>

      <div className="flex gap-2 pt-2">
        <button onClick={save} className="px-3 py-2 rounded-lg bg-fuchsia-600 hover:bg-fuchsia-700 text-white text-sm">Save</button>
        <a href={`/approval/${event.id}`} className="px-3 py-2 rounded-lg border border-zinc-700 text-sm">Open in Approval</a>
      </div>
    </div>
  );
}
```

---

# Server endpoints (thin, but correct)

* `GET /api/schedule?from&to` → return events in range.
* `POST /api/schedule` (from draft) → validate, allocate slot, set `status="scheduled"`, `needs_approval=true` if your policy demands.
* `PUT /api/schedule/:id` → update time/caption/tags.
* `DELETE /api/schedule/:id`
* Conflict policy: if overlapping rules per platform/time window, return `409 { suggestMinutes: 15 }`.

Add **WebSocket** or SSE for live updates later; not required for launch.

---

# Visual polish (tiny changes, big feel)

* Time labels: `text-zinc-500` small; grid lines `border-zinc-800`.
* Calendar container: `rounded-2xl`, soft inner shadow on hover; transition `duration-150`.
* Event hover: lift 2px (`translate-y-[-1px]`), stronger border.
* “Now” line: `bg-fuchsia-500` at 100% opacity; glow 20% opacity shadow.
* Empty Drafts: button “Generate content” CTA.

---

# Testing (no excuses)

Playwright checks to add (beyond your existing suite):

1. **Drag-drop happy path**: draft → slot → event appears → status=scheduled.
2. **Move with conflict**: drag onto taken slot → server returns 409 → UI shows toast → “Nudge 15m” works.
3. **Inspector edit**: change caption → save → event updates without reload.
4. **Filters**: hide/show platforms re-filters events.
5. **Timezone**: switch TZ; event wall-clock times transform correctly.

---

# Performance notes

* **Virtualize Drafts** with 100+ items (React-Window).
* **Memoize `eventContent`**; pass stable refs to FullCalendar.
* **Batch writes**: debounce frequent drags (don’t hammer `PUT` on each pixel).
* **Optimistic UI**: move immediately; revert only on non-200.

---

# Accessibility

* `aria-label` on event blocks (platform, time range, status).
* Focus ring on keyboard selection; Enter opens Inspector.
* All toolbar buttons have tooltips and hotkeys listed.

---

# What it looks like when finished

* You see your drafts as cards. You drag one to Wednesday 10:30am, it lands with a satisfying snap, colored by the platform, with a tiny **Needs Approval** badge.
* Click it; right panel slides in; tweak the caption; save. The calendar never reloads.
* A faint magenta line tracks “now.”
* Ghost hints show “best times” (toggleable). Clicking one schedules instantly.
* Changing TZ reflows the view; filters hide platforms you’re not using today.
* Tests cover the core flows, and the page remains fast even with dozens of posts.

If you want me to glue this to your exact API names and DB schema, I can produce the server handlers and zod validators in patch form next.
