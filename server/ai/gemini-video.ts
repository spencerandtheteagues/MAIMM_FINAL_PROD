import { GoogleGenAI, Modality } from "@google/genai";
import * as fs from "fs/promises";
import path from "path";

// Initialize Gemini client with the provided API key
const geminiApiKey = process.env.GEMINI_API_KEY;
if (!geminiApiKey) {
  throw new Error("GEMINI_API_KEY is required for Gemini video generation");
}

const ai = new GoogleGenAI({ apiKey: geminiApiKey });

export interface GeminiVideoOptions {
  prompt: string;
  duration?: number;
  aspectRatio?: string;
  model?: "veo-3-fast" | "veo-3";
}

export async function generateVideoWithVeo3(opts: GeminiVideoOptions): Promise<Buffer> {
  try {
    console.log('Generating video with Veo 3...');
    
    // Select Veo model based on preference
    const modelName = opts.model === "veo-3-fast" ? "veo-3-fast" : "veo-3";
    
    // Use the Gemini API to generate video with Veo 3
    const response = await ai.models.generateContent({
      model: modelName,
      contents: opts.prompt,
      config: {
        responseModalities: [Modality.VIDEO],
        videoConfig: {
          duration: opts.duration || 5,
          aspectRatio: opts.aspectRatio || "16:9",
          outputFormat: "mp4"
        }
      }
    });

    const candidates = response.candidates;
    if (!candidates || candidates.length === 0) {
      throw new Error("No video generated by Veo 3");
    }

    const content = candidates[0].content;
    if (!content || !content.parts) {
      throw new Error("Invalid response from Veo 3");
    }

    // Find the video part in the response
    for (const part of content.parts) {
      if (part.inlineData && part.inlineData.data) {
        const videoBuffer = Buffer.from(part.inlineData.data, "base64");
        console.log(`Successfully generated video with ${modelName}`);
        return videoBuffer;
      }
    }

    throw new Error("No video data found in Veo 3 response");
  } catch (error: any) {
    console.error('Veo 3 video generation error:', error);
    
    // Try fallback to Gemini Flash with video generation
    try {
      console.log('Attempting video generation with Gemini Flash model...');
      
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash-exp",
        contents: [
          { 
            role: "user", 
            parts: [{ text: `Create a video: ${opts.prompt}` }] 
          }
        ],
        config: {
          responseModalities: [Modality.TEXT, Modality.VIDEO],
        }
      });

      const candidates = response.candidates;
      if (!candidates || candidates.length === 0) {
        throw new Error("No video generated");
      }

      const content = candidates[0].content;
      if (!content || !content.parts) {
        throw new Error("Invalid response structure");
      }

      for (const part of content.parts) {
        if (part.inlineData && part.inlineData.data && part.inlineData.mimeType?.includes('video')) {
          const videoBuffer = Buffer.from(part.inlineData.data, "base64");
          console.log('Successfully generated video with Gemini Flash');
          return videoBuffer;
        }
      }
      
      throw new Error("No video data in response");
    } catch (fallbackError: any) {
      throw new Error(`Video generation failed: ${error.message}`);
    }
  }
}

export async function generateVideoWithGemini(prompt: string, duration: number = 5, aspectRatio: string = "16:9"): Promise<Buffer> {
  return generateVideoWithVeo3({
    prompt,
    duration,
    aspectRatio,
    model: "veo-3-fast" // Default to fast model
  });
}