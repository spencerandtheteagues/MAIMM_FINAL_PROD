import { GoogleGenAI, Modality } from "@google/genai";
import * as fs from "fs/promises";
import { existsSync } from "fs";
import path from "path";

// Initialize Gemini client with the provided API key
const geminiApiKey = process.env.GEMINI_API_KEY;
if (!geminiApiKey) {
  throw new Error("GEMINI_API_KEY is required for Gemini image generation");
}

const ai = new GoogleGenAI({ apiKey: geminiApiKey });

export interface GeminiImageOptions {
  prompt: string;
  aspectRatio?: string;
  model?: "imagen-4" | "imagen-3";
}

export async function generateImageWithGemini(opts: GeminiImageOptions): Promise<Buffer> {
  try {
    console.log('Generating image with Gemini Imagen 4...');
    
    // Use the newest Gemini model that supports image generation
    // gemini-2.0-flash-exp supports image generation with Imagen 4
    const model = ai.models.generateContent({
      model: "gemini-2.0-flash-exp",
      contents: [
        { 
          role: "user", 
          parts: [{ text: opts.prompt }] 
        }
      ],
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      }
    });

    const response = await model;
    const candidates = response.candidates;
    
    if (!candidates || candidates.length === 0) {
      throw new Error("No image generated by Gemini");
    }

    const content = candidates[0].content;
    if (!content || !content.parts) {
      throw new Error("Invalid response structure from Gemini");
    }

    // Find the image part in the response
    for (const part of content.parts) {
      if (part.inlineData && part.inlineData.data) {
        const imageBuffer = Buffer.from(part.inlineData.data, "base64");
        console.log('Successfully generated image with Gemini Imagen 4');
        return imageBuffer;
      }
    }

    throw new Error("No image data found in Gemini response");
  } catch (error: any) {
    console.error('Gemini image generation error:', error);
    throw new Error(`Gemini image generation failed: ${error.message}`);
  }
}

export async function generateImageWithImagen4(prompt: string, aspectRatio: string = "16:9"): Promise<Buffer> {
  try {
    console.log('Attempting to generate image with Imagen 4 via Gemini API...');
    
    // Use the image generation endpoint with Imagen 4
    const response = await ai.models.generateContent({
      model: "imagen-4",  // Direct Imagen 4 model
      contents: prompt,
      config: {
        responseModalities: [Modality.IMAGE],
        imageConfig: {
          aspectRatio: aspectRatio,
          numberOfImages: 1,
          outputMimeType: "image/png"
        }
      }
    });

    const candidates = response.candidates;
    if (!candidates || candidates.length === 0) {
      throw new Error("No image generated by Imagen 4");
    }

    const content = candidates[0].content;
    if (!content || !content.parts) {
      throw new Error("Invalid response from Imagen 4");
    }

    for (const part of content.parts) {
      if (part.inlineData && part.inlineData.data) {
        const imageBuffer = Buffer.from(part.inlineData.data, "base64");
        console.log('Successfully generated image with Imagen 4');
        return imageBuffer;
      }
    }

    throw new Error("No image data in Imagen 4 response");
  } catch (error: any) {
    console.log('Imagen 4 direct model failed, trying with Gemini flash model...');
    // Fallback to Gemini model with image generation
    return generateImageWithGemini({ prompt, aspectRatio });
  }
}